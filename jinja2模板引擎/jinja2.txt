jinja2变量过滤器：
过滤器名             说明：
safe                 渲染值时不转义
capitalize           把值的首字母转换成大写，其他字母转换成小写
lower                把值转换成小写形式
upper                把值转换成大写形式
title                把值中每个单词的首字母都转换成大写
striptags            渲染之前把值中所有的HTML标签都删除


jinja2提供了多种控制结构，可用来改变模板的渲染流程：
{% if user %}
    Hello, {{ user }}!
{% else %}
    Hello, Stranger!
{% endif %}

另一种常见需求时在模板中渲染一组元素，下例展示了如何使用for循环实现这一需求：
<ul>
  {% for comment in comments %}
    <li>{{ comment }}</li>
  {% endfor %}
</ul>


jinja2还支持宏，宏类似于python代码中的函数：
{% macro render_comment(comment) %}
  <li>{{ comment }}</li>
{% endmacro %}
<ul>
  {% for comment in comments %}
    {{ render_comment(comment) }}
  {% endfor %}
</ul>


为了重复使用宏，我们可以将其他报错在单独的文件中，然后在需要使用的模板中导入：
{% import 'macros.html' as macros %}
<ul>
  {% for comment in comments %}
    {{ macros.render_comment(comment) }}
  {% endfor %}
</ul>


需要在多出重复使用模板代码片段可以写入单独文件，在包含所有模板中，以避免重复：
{% include 'common.html' %}

另一种重复使用代码的强大方式模板继承，它类似于Python代码中的类继承，首先创建个名为base.html的基模板：
<html>
<head>
    {% block head %}
    <title>{% block title %}{% endblock %} - My Application</title>
    {% endblock %}
</head>
<body>
    {% block body %}
    {% endblock %}
</body>
</html>


block标签定义的元素可在衍生模板中修改，我们定义了名为head,title和body的块，title包含在head中，例子是基模板的
衍生模板：
{% extends "base.html" %}
{% block title %}Index{% endblock %}
{% block head %}
  {{ super() }}
  <style>
  </style>
{% endblock %}
{% block body %}
<h1>Hello, world!</h1>
{% endblock %}


extends指令声明这个模板衍生自base.html,在extends指令之后，基础模板中的3个块被重新定义，模板引擎会将其插入适当的位置。注意新定义的head块，在基模板中其内容不是空的，所以使用super()获取原来的内容。



