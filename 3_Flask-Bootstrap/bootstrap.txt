Flask-Bootstrap集成Twitter Bootstrap

Bootstrap是客户端框架，因此不会直接涉及服务器，服务器需要做的知识提供引用了Bootstrap层叠样式表(CSS)和JavaScript文件的HTML响应，并在HTML，CSS和JavaScript代码中实例化所需组件，这些操作最理想的执行场所就是模板

要想在程序中集成Bootstrap，仙人要对模板做所有必要的改动，不过，更简单的方法是使用一个名为Flask-Bootstrap的
Flask拓展，简化集成的过程
pip install flask-bootstrap

Flask拓展一般都在创建程序实例时初始化

from flask_bootstrap import Bootstrap
或者
from flask.ext.bootstrap import Bootstrap
# ...
app = Flask(__name__)
bootstrap = Bootstrap(app)

Flask-script一样，Flask-Bootstrap也从flask.ext命名空间中导入，然后把程序实力传入构造方法进行初始化。

初始化Flask-Bootstrap之后，就可以在程序中使用一个包含所有Bootstrap文件的基模板。
这个模板利用jinja2的模板继承机制，让程序拓展一个具有基本页面结构的基模板，其中就有用来引入Bootstrap的元素
示例：是改写为衍生模板后的新版本
template/user.html
{% extends "bootstrap/base.html" %}


jinja2中的extends指令从Flask-Bootstrap中导入bootstrap/base.html,从而实现模板继承。Flask-Bootstrap中的基模板提供了一个网页框架，引入了Bootstrap中所有CSS和JavaScript文件

基模板中定义了可在衍生模板中重定义的块，block和endblock指令定义的块中的内容可添加到基模板中。

上面这个user.html模块定义了3个块，分别名为title、vavbar和content。这些块都是基模板提供的，可在衍生模板中重新
定义。title块的作用很明显，其中的内容会出现在渲染后的HTML文档头部，放在<title>标签中，navbar和content这两个块分别表示页面中的导航条的主题内容。

在这个模板中,navbar块中使用Bootstap组件定义了一个简单的导航条，content块中有个<div>容器，其中包含一个页面头部
之前版本的模板中的欢迎消息，现在就放在这个页面头部
Bootstrap官方文档(http://getbootstrap.com)是很好的学习资源，有很多可以直接复制粘贴示例。


Flask-Bootstrap的base.html模板还定义了很多其他块，都可在衍生模板中使用
Flask-Bootstrap基模板中定义的块
块名：           说明：
doc              整个HTML文档
html_attribs     <html>标签的属性
html             <html>标签中的内容
head             <head>标签中的内容
title            <title>标签中的内容

metas            一组<meta>标签
styles           层叠样式表定义
body_attribs     <body>标签的属性
body             <body>标签中的内容
navbar           用户定义的导航条
content          用户定义的页面内容
scripts          文档底部的JavaScript声明

很多块都是Flask-Bootstrap自用的，如果直接重定义可能会导致一些问题，例如Bootstrap所需的文件在styles和script块中声明，如果程序需要向已经有内容的块中添加新内容，必须使用jinja2提供的super()函数，例如，如果要在衍生模板中添加新JavaScript文件，需要这么定义script块：
{% block scripts %}
{{ super() }}
<script type="text/javascript" src="my-script.js"></script>
{% endblock %}



自定义错误页面：
如果在浏览器的地址栏中输入了不可用的路由，那么会显示一个状态吗为404的错误页面，现在这个错误页面太简陋、平庸，而且样式和使用了Bootstrap的页面不一致。
想常规路由一样，Flask允许程序使用基于模板的自定义错误页面，最常见的错误代码有两个：404，客户端请求未知页面或路由显示；500，有未处理的异常时显示。
@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'),404

@app.errorhandler(500)
def internal_server_error(e):
    return render_template('500.html'),500
和视图函数一样，错误处理程序也会返回响应，他们还返回与该错误对于的数字状态吗。
错误处理程序中引用的模板也需要编写，这些模板应该和常规页面使用相同的布局，因此要有一个导航条和显示错误消息的页面头部。

编写这些模板最直观的方法是复制template/user.html,分别创建templates/404.html和templates/500.html,
然后把这两个文件中的页面头部元素改成相应的错误消息，但这种方法会带来很多重复劳动


jinja2的模板继承机制可以帮助我们解决这一问题，Flask-Bootstrap提供了一个具有页面基本布局的基模板，同样，程序可以定义一个具有更完整页面布局的基模板，其中包含导航条，而页面内容则可留在衍生模板中定义，例子：templates/base.html
的内容，这是一个继承自bootstrap/base.html的新模板，其中定义了导航条，这个模板本身也可以为其他模板的基模板，
例如：templates/user.html、templates/404.html和templates/500.html
templates/base.html:包含导航条的程序基模板
{% extends "boostrap/base.html" %}

。。。
{% block content %}
<div class="container">
  {% block page_content %}{% endblock %}
</div>
{% endblock %}

这个模板的content块中只有一个<div>容器，其中包含了一个名为page_content的新的空块，块中的内容由衍生模板定义
现在，程序使用的模板继承自这个模板，而不直接继承自Flask-Bootstrap的基模板，通过继承templates/base.html模板
编写自定义的404错误页面很简单。
templates/404.html
{% extends "base.html" %}
{% block title %}Flasky - Page Not Found{% endblock %}
{% block page_content %}
<div class="page-header">
  <h1>Not Found</h1>
</div>
{% endblock %}

自定义错误404页面：
templates/user.html可以通过继承这个基模板来简化内容：
{% extends "base.html" %}
{% block title %}Flasky{% endblock %}
{% block page_content %}
<div class="page-header">
  <h1>Hello, {{ name }}!</h1>
</div>
{% endblock %}





































