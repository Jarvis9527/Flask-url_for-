1,Web表单
请求对象包含客户端发出的所有请求信息，其中，request.form能获取POST请求中提交的表单数据。
尽管Flask的请求对象提供信息足够用于处理Web表单，但有些任务很单调，而且要重复操作，比如，生成表单的HTML代码和验证提交的表单数据
Flask-WTF(http://pythonhosted.org/Flask-WTF),
Flask-WTF中文站：http://docs.jinkan.org/docs/flask-wtf/，拓展可以把处理web表单的过程变成一种愉悦的体验
这个拓展对独立的WTForms (http://wtforms.simplecodes.com)包进行了包装，方便集成到Flask程序中。

Flask-WTF及其依赖可使用pip安装：
pip install flask-wtf
使用方法,导入模板:
from flask_wtf import Form

2,跨站请求伪造：
Flask-WTF能保护所有表单免受跨站请求伪造，CSRF的攻击，恶意网站把请求发送到被攻击者已登录的其他网站时就会引发CSRF攻击，为了实现CSRF保护，Flask-WTF需要程序设置一个密钥，Flask-WTF使用这个密钥生成加密令牌，在用令牌验证请求中表单数据的真伪，设置方法：
Flasky.py
app = Flask(__name__)
app.config['SECRET_KEY'] = 'xiaoxiao'
#app.config字典可用来存储框架，拓展和程序本身的配置变量，使用标准的字典句法就能把配置值添加到app.config对象中
这个对象还提供了一些方法，可以从文件或缓解中导入配置值。

SECRET_KEY配置变量是通用密钥，可在Flask和多个第三方拓展中使用，如其名所示，加密的强度取决于变量值的机密成都，不同的程序要使用不同的密钥，而且要包装其他人不知道你所用的字符串。


3,表单类：
使用Flask-WTF时，每个Web表单都由一个继承自Form的类表示，这个类定义表单中的一组字段，每个字段都用对象表示，
字段对象可附属一个或多个验证函数。验证函数用来验证用户提交的输入值是否符合要求：
例如：包含一个文本字段和一个提交按钮。
world.py

from flask.ext.wtf import Form
from wtforms import StringField, SubmitField, PasswordField
from wtforms.validators import Required

class NameForm(Form):   #继承表单类属性
    name = StringField('What is your name?', validators=[Required()])
    password = PasswordField('Please input password?', validators=[Required()])
    submit = SubmitField('submit')

表单中字段都定义为类变量，类变量的值是相应字段类型的对象，在这个示例中NameForm表单中有一个名为name的文本字段和
一个submit的提交按钮。StringField类表示属性为type="text"的<input>元素，SubmitField类属性为type="submit"的
<input>元素。字段构造函数的第一个参数是把表单渲染成HTML的使用的标号。

StringField构造函数中可选参数validators指定一个由验证函数组成的列表，在接受用户提交的数据之前验证数据，验证函数Required()确保提交的字段不为空。

#Form基类由Flask-WTF拓展定义，所有从flask.ext.wtf中导入，字段和验证函数却可以直接从WTForms包中导入
WTForms支持的HTML标准字段如下：

WTForms支持的HTML标准字段：
#################################################
字段类型：                  说明：     
StringField                 文本字段   
TextAreaField               多行文本字段
PasswordField               密码文本字段
HiddenField                 隐藏文本字段
DateField                   文本字段，值为datetime.date格式
DateTimeField               文本字段，值为datetime.datetime格式
IntegerField                文本字段，值为整数
DecimalField                文本字段，值为decimal.Decimal
FloatField                  文本字段，值为浮点数
BooleanField                复选框，值为True和False
RadioField                  一组单选框
SelectField                 下拉列表
SelectMultipleField         下拉列表，可选择多个值
FileField                   文件上传字段
SubmitField                 表单提交按钮
FormField                   把表单作为字段嵌入另一个表单
FieldList                   一组指定类型的字段

WTForms内建的验证函数如下：WTForms验证函数：
##################################################
验证函数：                 说明：
Email                      验证电子邮件地址
EqualTo                    比较两个字段的值；常用于需求输入两次密码进行确认的情况
IPAddress                  验证IPv4网络地址
Length                     验证输入字符串的长度
NumberRange                验证输入的值在数字范围内
Optional                   无输入值时跳过其他验证函数
Required                   确保字段中有数据
Regexp                     使用正则表达式验证输入值  
URL                        验证URL
AnyOf                      确保输入值在可选值列表中
NoneOf                     确保输入值不在可选值列表中




4,把表单渲染成HTML
即便能指定HTML属性，但按照这种方式渲染表单工作量还是很大，所有在条件允许的情况下最好能使用Bootstrap中的表单样式Flask-Bootstrap提供了一个非常高端的辅助函数，可以使用Bootstrap中预先定义好的表单样式渲染整个Flask-WTF表单，而这些操作只需一次调用即可完成，使用Flask-Bootstrap,上述表单可使用下面的方式渲染：
    {% import "bootstrap/wtf.html" as wtf %}
    {{ wtf.quick_form(form) }}
import指令的使用方法和普通Python代码一样,允许导入模板中的元素并用在多个模板中，导入的bootstrap/wtf.html文件中
定义了一个使用Bootstrap渲染Flask-WTF表单对象的辅助函数，wtf.quick_form()函数的参数为Flask-WTF表单对象，
使用Bootstrap的默认样式渲染传入的表单。
templates/index.html: 使用Flask-WTF和Flask-Bootstrap渲染表单
{% extends "base.html" %}
{% import "bootstrap/wtf.html as wtf" %}
{% block title %}Flasky{% endblock %}
{% block page_content %}
<div class="page-header">
  <h1>Hello, {% if name %}{{ name }}{% else %}Stranger{% endif %}!</h1>
</div>
{{ wtf.quick_form(form) }}
{% endblock %}

模板的内容区现在有两部分，第一部分是页面头部，显示欢迎消息，这里用到了一个模板条件语句，jinja2中的条件语句格式
为{% if condition %}...{% else %}...{% endif %}如果条件的计算结果为True,那么渲染if和else指令之间的值，如果条件
的计算结果为False，则渲染else和endif指令之间的值，在这个例子中，如果没有定义模板变量name,则会渲染字符串
"Hello,Stranger!",内容区的第二部分使用wtf.quick_form()函数渲染NameForm对象

5，在视图函数中处理表单：
在新版hello.py中，视图函数index()不仅要渲染表单，还要接收表单中的数据
@app.route('/', methods=['GET', 'POST'])
def index():
    name = None
    form = NameForm()
    if form.validate_on_submit():
        name = form.name.data
        form.name.data = ''
    renturn render_template('index.html', form=form, name=name)

#局部变量name用来存放表单中输入的有效名字，如果没有输入，其值为None,如上述代码所示，在视图函数中创建了一个
NameForm类实例用于表示表单，提交表单后，如果数据能被所有验证函数接受，
那么validate_on_submit()方法的返回值为True,否则返回False,这个函数的返回值决定是重新渲染表单还是处理表单提交数据

用户第一次访问程序时，服务器会收到一个没有表单数据的GET请求，所有validate_on_submit()将返回False，if语句的内容
将被跳过，通过渲染模板处理请求，并传入表单对象和值为None的name变量作为参数，用户会看到浏览器中显示了一个表单

用户提交表单后，服务器搜到一个包含数据的POST请求，validate_on_submit()会调用name字段上附属的Required()验证函数
如果名字不为空，就能通过验证，validate_on_submit()返回True，现在用户输入名字可通过字段data属性获取，在if语句中
把名字赋值给局部变量name,然后在把data属性设为空字符串，从而清空表单字段，最后一行调用render_template()函数渲染
模板，但这一次参数name的值为输入的名字，因为会显示一个针对该用户的欢迎消息。




























