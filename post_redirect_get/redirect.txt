1,重定向和用户会话：
用户输入名字和提交表单，然后点击浏览器书安心，会看到一个莫名其妙的警告，要求再次提交表单之前进行确认
之所以出现这种情况，是因为刷新页面时浏览器会重新发送之前已经发送过的最后一个请求，如果这个请求是一个包含表单
数据的POST请求，刷新页面会后会再次提交表单，大多数情况下，这并不是离线的处理方式.

很多用户都不理解浏览器发出的这个警告，基于这个原因，最好别让Web程序把POST请求作为浏览器发送的最后一个请求。

这种需求的实现方式是，使用重定向作为POST请求响应，而不是使用常规响应，重定向是一种特殊的响应，响应内容是URL
而不是包含HTML页面代码，浏览器收到这种响应时，会向重定向的URL发起GET请求，显示页面的内容，这个页面的价值可能要
花几微秒，因为要先把第二个请求发送给服务器，除此之外，用户不会察觉到有什么不同，现在，最后一个请求是GET请求，
所以刷新命令能像预期的那样正常使用了，这个技巧称为Post/重定向/Get模式

但这种方法会带阿里另一个问题，程序处理POST请求时，使用form.name.data获取用户输入的名字，可是一旦这个请求结束
数据也就丢失了，因为这个POST,请求使用重定向处理，所以程序需要保存输入的名字，这样重定向后的请求才能获得并使用这个名字，从而构建真正的响应。

程序可以把数据存储在用户会话中，在请求之间记住数据，用户会话是一种私有存储，存在于每个链接到服务器的客户端中
它是请求上下文中的变量，名为session，像python字典一样操作。
{默认请求下，用户会话保存在客户端cookie中，使用设置的SECRET_KEY进行加密签名，如果删改了cookie内容，签名就会失效，会话也就随之失效}

@app.route('/', methods=['GET','POST'])
def index():
    form = NameForm()
    if form.validate_on_submit():
        session['name'] = form.name.data
        return redirect(url_for('index'))
    return render_template('index.html', form=form, name=session.get('name'))

在程序的前一个版本中，局部变量name被用于存储用户在表单中输入的名字，
这个变量现再保存在用户会话中，即session['name'],所以在两次请求之前也能记住输入的值。

现在，包含合法表单数据的请求最后会调用redirect()函数，redirect()是个辅助函数，用来生成HTTP重定向响应，
redirect()函数的参数是重定向的URL，这里是有的重定向URL是程序根地址，因此重定向响应版本可以写的更简单一些，
写成redirect('/'),但却会是有Flask提供的URL生成函数url_for()。推荐使用url_for()生成URL，因为这个函数使用URL
映射生成URL，从而保证URL和定义的路由兼容，而且修改利用名字后依然可用。

