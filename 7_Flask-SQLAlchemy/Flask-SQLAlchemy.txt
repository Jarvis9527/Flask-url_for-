Flask-SQLAlchemy管理数据库：
Flask-SQLAlchemy是一个Flask拓展，简化了在Flask程序中使用SQLAlchemy的操作，
SQLAlchemy是一个很强大的关系型数据库框架，支持多种数据库后台。SQLAlchemy提供了高层ORM，也提供了使用原生SQL的
低层功能。


和其他大多数拓展一样,Flask-SQLAlchemy也使用pip安装：
pip install flask-sqlalchemy

在Flask-SQLAlchemy中，数据库使用URL指定。最流行的数据库引擎采用的数据库URL

Flask-SQLAlchemy数据库URL
数据库引擎：              URL
MySQL                     mysql://username:password@hostname/database
Postgres                  postgresql://username:password@hostname/database
SQLite(Unix)              sqlite:///absolute/path/to/database
SQLite(Windows)           sqlite:///c:/absolute/path/to/databse

在这些URL中，hostname表示MySQL服务所在的主机，可以是本地主机（localhosy）,也可以是远程服务器。数据库服务器上可以托管多个数据库，因此database表示要使用的数据库名。如果数据集需要进行认证，username和password表示数据库用户
密令


SQLite数据库不需要使用服务器，因此不同指定hostname、username和password。URL中的database是硬盘上文件名。

程序使用的数据库URL必须保存到Flask配置对象的SQLALCHEMY_DATABASE_URI键中。配置对象中海油一个很有用的选项，
即SQLALCHEMY_COMMIT_ON_TEARDOWN键，将其设为True时，每次请求结束后都会自动提交数据库中的变动。其他配置选项
的作用请参阅Flask-SQLAlchemy的文档，例如如何初始化及配置一个简单的SQLite数据库。

from flask.ext.sqlalchemy import SQLAlchemy

basedir = os.path.abspath(os.path.dirname(__file__))
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = \
    'sqlite:///' + os.path.join(basedir, 'data.sqlite')
app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True
db = SQLAlchemy(app)

db对象是SQLAlchemy类的实例，表示程序使用的数据库，同时还获得了Flask-SQLAlchemy提供的所有功能。



