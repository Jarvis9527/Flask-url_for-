Flask-SQLAlchemy管理数据库：
Flask-SQLAlchemy是一个Flask拓展，简化了在Flask程序中使用SQLAlchemy的操作，
SQLAlchemy是一个很强大的关系型数据库框架，支持多种数据库后台。SQLAlchemy提供了高层ORM，也提供了使用原生SQL的
低层功能。

中文学习链接：http://www.pythondoc.com/flask-sqlalchemy/quickstart.html

和其他大多数拓展一样,Flask-SQLAlchemy也使用pip安装：
pip install flask-sqlalchemy

在pip安装时候，你会看到安装了2个包，一个是Flask-SQLAlchemy，然后是SQLAlchemy,
Flask-SQLAlchemy依赖SQLAlchemy.内部调用都是SQLAlchemy，所以简单来说在安装时候，会安装这里两个包，
Flask-SQLAlchemy也有自己的代码，简化了很多SQLAlchemy.

在Flask-SQLAlchemy中，数据库使用URL指定。最流行的数据库引擎采用的数据库URL

Flask-SQLAlchemy数据库URL
数据库引擎：              URL
MySQL                     mysql://username:password@hostname/database
Postgres                  postgresql://username:password@hostname/database
SQLite(Unix)              sqlite:///absolute/path/to/database
SQLite(Windows)           sqlite:///c:/absolute/path/to/databse

在这些URL中，hostname表示MySQL服务所在的主机，可以是本地主机（localhosy）,也可以是远程服务器。数据库服务器上可以托管多个数据库，因此database表示要使用的数据库名。如果数据集需要进行认证，username和password表示数据库用户
密令


SQLite数据库不需要使用服务器，因此不同指定hostname、username和password。URL中的database是硬盘上文件名。

程序使用的数据库URL必须保存到Flask配置对象的SQLALCHEMY_DATABASE_URI键中。配置对象中海油一个很有用的选项，
即SQLALCHEMY_COMMIT_ON_TEARDOWN键，将其设为True时，每次请求结束后都会自动提交数据库中的变动。其他配置选项
的作用请参阅Flask-SQLAlchemy的文档，例如如何初始化及配置一个简单的SQLite数据库。

from flask.ext.sqlalchemy import SQLAlchemy

basedir = os.path.abspath(os.path.dirname(__file__))
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = \
    'sqlite:///' + os.path.join(basedir, 'data.sqlite')
app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True
db = SQLAlchemy(app)

db对象是SQLAlchemy类的实例，表示程序使用的数据库，同时还获得了Flask-SQLAlchemy提供的所有功能。


定义模型：
模型这个术语表示程序使用的持久化实体。在ORM中，模型一般是一个Python类，类中的属性对应数据库表中的列。
Flask-SQLAlchemy创建的数据库实例为模型提供了一个基类以及一系列辅助类和辅助函数，可用于定义模型的结构
如图：
Role <==> User
定义Role和User模型：
class Role(db.Model):
    __tablename__ = 'roles'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), unique=True)
    
    def __repr__(self):
        return '<Role %r>' % self.name

class User(db.Model):
    __tablename__ == 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, index=True)

    def __repr__(self):
        return '<User %r>' % self.name

类变量__tablename__定义在数据库中使用的表名，如果没有定义__tablename__.Flask-SQLAlchemy会使用一个默认名字，
但默认的表名没有遵循使用复数形式进行命名的约定，所以最好由我们自己来指定表名，其余的类变量都是该模型的属性，
被定义为db.Column类的实例。

db.Column类构造函数的第一个参数是数据库列和模型属性的类型，列出一些可用的列类型以及在模型中使用的Python类型.
最常用的SQLAlchemy列类型：
类型名：              Python；类型                  说明：
Integer               int                           普通整数，一般是32位
SmallInteger          int                           取值范围小的整数，一般是16位
BigInteger            int或long                     不限制精度的整数
Float                 float                         浮点数
Numeric               decimal.Decimal               定点数
String                str                           变长字符串
Text                  str                           变长字符串，对较长或不限长度的字符串做了优化
Unicode               unicode                       变长Unicode字符串
UnicodeText           unicode                       变长Unicode字符串，对较长或不限长度的字符串做了优化
Boolean               bool                          布尔值
Date                  datetime.date                 日期
Time                  datetime.time                 时间
DateTime              datetime.datetime             日期和时间
Interval              datetime.timedelta            时间间隔
Enum                  str                           一组字符串
PickleType            任何Python对象                自动使用Pickle序列化
LargeBinary           str                           二进制文件

db.Column中其余的参数指定属性的配置选项，列出了一些可用选项。
最常使用的SQLAlchemy列选项：
选项名：                   说明：
primary_key                如果设为True,这列就是表的主键
unique                     如果设为True,这列不允许出现重复的值
index                      如果设为True,为这列创建索引，提升查询效率
nullable                   如果设为True,这列允许使用空值；如果设为False，这列不允许使用空值
default                    为这列定义默认值

Flask-SQLAlchemy要求每个模型都要定义主键，这一列经常命名为id.
虽然没有强制要求，但这两个模型都定义了__repr()__方法，返回一个具有可读性的字符串表示模型，可在调整和测试时使用


关系：
关系型数据库使用关系把不同表中的行联系起来，所示的关系图表示用户和角色之间的一种简单关系。这是角色到用户的一对
多关系，因为一个角色可属于多个用户，而每个用户都只能有一个角色。

例如： 一堆多关系模型类中表示方法
hello.py

class Role(db.Model):
    # ...
    users = db.relationship('User', backref='role')

class User(db.Model):
    # ...
    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))

db.ForeignKey：普通整数32位

关系使用users表中的外键里连接了两行。添加到User模型中的role_id列被定义为外键，就是这个外键建立起了关系，传给
db.ForeignKey()的参数 'roles.id'表明，这列的值是roles表中行的id值

添加到Role模型中的users属性代表这个关系的面向对象视角，对于一个Role类的实例，其users属性将返回与角色关联的用户
组成的列表.db.relationship()的第一个参数表名这个关系的另一端是哪个模型。如果模型类尚未定义可使用字符串形式指定

db.relationship()中的backref参数向User模型中添加一个role属性，从而定义反向关系。这一属性可替代role_id访问Role模型，此时获取的是模型对象，而不是外键的值。

大多数情况下，db.relationship()都能自行找到关系中的外键，但有时却无法决定把哪一列作为外键。例如，如果User模型
中有两个或以上的列定义为Role模型的外键，SQLAlchemy就不知道该使用哪列。如果无法决定外键，你就要为
db.relationship()提供额外参数，从而确定所有外键。表中列出了定义关系时常用的配置选项

常用的SQLAlchemy关系选项：
选项名：                  说明：
backref                   在关系的另一个模型中添加反向引用
primaryjoin               明确指定两个模型之间是有的联结条件。只在模棱两可的关系中需要指定
lazy                      指定如何加载相关记录。可选值有select(首次访问时按需加载)、immediate(源对象加载后就加                           载)、joined(加载记录，但是有联结)、subquery(立即加载，但使用子查询)，noload(用不加载)                          和dynamic(不加载记录，但提供加载记录的查询)

uselist                   如果设为False，不使用列表，而使用标量值
order_by                  指定关系中记录的排序方式
secondary                 指定多对多关系中关系表的名字
secondaryjoin             SQLAlchemy无法自行决定时，指定多对多关系中的二级联结条件

除了一堆多之外，还有几种其他的关系类型。一对一关系可以用前面介绍的一对多关系表示，但调用db.relationship()时要
把uselist设为False,把'多'变长'一'。多对一关系也可以用一对多表示，对调两个表即可，或者把外键和db.relationship()
都放在'多'这一侧。最复杂的关系类型是多对多，需要用到第三张表，这个表称为关系表。你将在第12章学习多对多关系。


##########################
数据库操作：
现在模型以及按照例子所示数据库关系图完成配置，可以随时使用了，学习如何使用模型的最好方法是在Python Shell中实际
操作。接下来介绍最常用的数据库操作。

创建表：
要让Flask-SQLAlchemy根据模型类创建数据库。方法是使用db.create_all()函数：
python hello.py shell
>>> from hello import db
>>> db.create_all()


如果你查看程序目录，会发现新建了一个名为data.sqlite的文件。这个SQLite数据库文件的名字就是在配置中指定的。
如果数据库表已经存在于数据库中，那么db.create_all()不会重新创建或者更新这个表。如果修改模型后要把改动应用到现有的数据库中，这一特性会带来不便。更新现有数据库表的粗暴方式是先删除旧表在重新创建
>>> db.drop_all()
>>> db.create_all()

遗憾的是，这个方法有个我们不想看到的副作用，它把数据库中原有的数据都销毁了，本章末尾将会介绍一种更好的方式用于
更新数据库。

插入行：
下面代码创建了一些角色和用户
>>> from hello import Role, User
>>> admin_role = Role(name='Admin')
>>> mod_role = Role(name='Moderator')
>>> user_role = Role(name='User')
>>> user_john = User(username='john', role=admin_role)
>>> user_susan = User(username='susan', role=user_role)
>>> user_david = User(username='david', role=user_role)

模型的构造函数接受的参数是使用关键字参数指定的模型属性初始值，注意，role属性也可以使用，虽然它不是真正的数据库
列，但却是一对多关系的高级表示。这些新建对象的id属性并没有明确设定，因为主键是由Flask-SQLAlchemy管理的，
现在这些对象只存在于Python中，还未写入数据库。因此id尚未赋值
>>>print(admin_role.id)
None
>>>print(mod_role.id)
None
>>>print(user_role.id)
None

通过数据库会话管理对数据库所做的改动，在Flask-SQLAlchemy中，会话由db.session表示。准备把对象写入数据库之前，
先要将其添加到会话中：
>>>db.session.add(admin_role)
>>>db.session.add(mod_role)
>>>db.session.add(user_role)
>>>db.session.add(user_john)
>>>db.session.add(user_susan)
>>>db.session.add(user_david)

或者简写成：
>>>db.session.add_all([admin_role, mod_role, user_role, user_john,])
为了把对象写入数据库，我们要调用commit()方法提交会话：

>>> db.session.commit()
再次查看id属性，现在它们以及赋值了：

>>> print(admin_role.id)
1
>>> print(mod_role.id)
2
>>> print(user_role.id)
3


数据库会话db.session和第4章介绍的Flasksession对象没有关系，数据库会话也称为事物。

数据库会话能保证数据库的一致性，提交操作使用原子方式把会话中的对象全部写入数据库，如果在写入会话的过程中发生了错误，整个会话都会失效。如果你始终把相关改动放在会话中提交，就能避免因部分更新导致的数据库不一致。

数据库会话也可以回滚，调用db.session.rollback()后，添加到数据库会话中的所有对象都会还原到它们在数据库时的状态。



修改行：
在数据库会话上调用add()方法也能更新模型。我们继续在之前的shell会话中进行操作，下面这个例子把"Admin"角色重命名
为"Administrator"
>>> admin_role.name = "Administrator"
>>> db.session.add(admin_role)
>>> db.session.commit()



删除行：
数据库会话还有个delete()方法。下面这个例子把"Moderator"角色从数据库中删除；
>>> db.session.delete(mod_role)
>>> db.session.commit()

#注意，删除与插入和更新一样，提交数据库会话后才会执行。


查询行：
Flask-SQLAlchemy为每个模型类都提供了query对象。最基本的模型查询是取回对于表中的所有记录：
>>> Role.query.all()
[<Role u'Administrator'>, <Role u'User'>]
>>> User.query.all()
[<User u'john'>, <User u'susan'>, <User u'david'>]


使用过滤器可以配置query对象进行更精确的数据库查询。下面这个例子查找角色为"User"的所有用户：
>>> User.query.filter_by(role=user_role).all()
[<User u'susan'>,<User u'david'>]

若要查看SQLAlchemy为查询生成的原生SQL查询语句，只需把query对象转换成字符串：
>>> str(User.query.filter_by(role=user_role))

如果退出Shell的话，前面这些例子中创建的对象就不会以Python对象形式存在，而是作为各自数据库表中的行。
如果你打开了一个新的shell会话，就要从数据库中读取行，在重新创建Python对象。下面这个例子发起了一个查询，加载名为"User"的用户角色
>>> user_role = Role.query.filter_by(name='User').filter()

filter_by()等过滤器在query对象上调用，返回一个更精确的query对象，多个过滤器可以一起调用，直接获得所需结果。

表中列出了可在query对象上调用的常用过滤器。完整的列表参见SQLAlchemy文档(http://docs.sqlalchemy.org)

常用的SQLAlchemy查询过滤器：
过滤器：               说明：
filter()               把过滤器添加到原查询上，返回一个新查询
filter_by()            把等值过滤器添加到原查询上，返回一个新查询
limit()                使用指定的值限制原查询返回的结果数量，返回一个新查询
offset()               偏移原查询返回的结果，返回一个新查询
order_by()             根据指定条件对原查询结果进行排序，返回一个新查询
group_by()             根据指定条件对原查询结果分组，返回一个新查询

在查询上应用指定的过滤器后，通过调用all()执行查询，以列表的形式返回结果。除了all()之外，还有其他方法能触发
查询执行，列出了执行查询的其他方法：
常用的SQLAlchemy查询执行函数
方法：                 说明：
all()                  以列表形式返回查询的所有结果
first()                返回查询的第一个结果，如果没有结果，则返回None
first_or_404()         返回查询的第一个结果，如果没有结果，则终止请求，返回404错误响应
get()                  返回指定主键对应的行，如果没有对应的行，则返回None
get_or_404()           返回指定主键对应的行，如果没有找到指定的主键，则终止请求，返回404错误响应
count()                返回查询结果的数量
paginate()             返回一个paginate对象，它包含指定范围内的结果


##########################################################################
关系和查询的处理方式类似。下面这个例子分别从关系的两端查询角色和用户之间的一对多关系：
>>> users = user_role.users
>>> users
[<User u'susan'>, <User u'david'>]
>>> users[0].role
<Role u'User'>

这个例子中的user_role.users查询有个小问题。执行user_role.users表达式时，隐含的查询会调用all()返回一个用户列表
query对象是隐藏的，因此无法指定更经常的查询过滤器。就这个特定示例而言，返回一个按照字母顺序排序的用户列表可能
更好。在示例中，我们修改了关系的设置，加入了lazy =
'dynamic'参数，从而禁止自动执行查询

hello.py: 动态关系
class Role(db.Model):
    # ...
    users = db.relationship('user', backref='role', lazy='dynamic')
    # ...

这样配置关系之后，user_role.users会返回一个尚未执行的查询，因此可以在其上添加过滤器：

>>> user_role.users.order_by(User.username).all()
[<User u'david'>, <User u'susan'>]
>>> user_role.users.count()
2


在视图函数中操作数据库：
前一节介绍的数据库操作可以直接在视图函数中进行，展示了首页路由的新版本，已经把用户输入的名字写入数据库。
示例：hello.py: 在视图函数中操作数据库
@app.route('/', methods=['GET', 'POST'])
def index():
    form = NameForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.name.data).first()
        if user is None:
            user = User(username = form.name.data)
            db.session.add(user)
            session['known'] = False
        else:
            session['known'] = True
        session['name'] = form.name.data
        form.name.data = ''
        return redirect(url_for('index'))
    return render_template('index.html', 
        form = form, name = session.get('name'), 
        known = session.get('known', Falase))

在这个修改后的版本中，提交表单后，程序会使用filter_by()查询过滤器在数据库中查找提交的名字。变量known被写入用户
会话中，因此重定向之后，可以把数据传给模板，用来显示自定义的欢迎消息。注意，要想让程序正常运行，你必须按照前面
介绍的方法，在Python Shell中创建数据库表。

对应的模板新版本如视图所示，这个模板使用known参数在欢迎消息中加入了第二行，从而对已知用户和新用户显示不同的内容
例如：
templates/index.html
{% extends "base.html" %}
{% import "bootstrap/wtf.html as wtf" %}
{% block title %}Flasky{% endblock %}
{% block page_content %}
<div class="page-header">
  <h1>Hello, {% if name %}{{ name }}{% else %}Stranger{% endif %}!</h1>
  {% if not known %}
  <p>Pleased to meet you!</p>
  {% else %}
  <p>Happy to see you again!</p>
  {% endif %}
<div>
{{ wtf.quick_form(form) }}
{% endblock %}




















































































































