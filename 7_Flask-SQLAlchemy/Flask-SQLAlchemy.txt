Flask-SQLAlchemy管理数据库：
Flask-SQLAlchemy是一个Flask拓展，简化了在Flask程序中使用SQLAlchemy的操作，
SQLAlchemy是一个很强大的关系型数据库框架，支持多种数据库后台。SQLAlchemy提供了高层ORM，也提供了使用原生SQL的
低层功能。


和其他大多数拓展一样,Flask-SQLAlchemy也使用pip安装：
pip install flask-sqlalchemy

在Flask-SQLAlchemy中，数据库使用URL指定。最流行的数据库引擎采用的数据库URL

Flask-SQLAlchemy数据库URL
数据库引擎：              URL
MySQL                     mysql://username:password@hostname/database
Postgres                  postgresql://username:password@hostname/database
SQLite(Unix)              sqlite:///absolute/path/to/database
SQLite(Windows)           sqlite:///c:/absolute/path/to/databse

在这些URL中，hostname表示MySQL服务所在的主机，可以是本地主机（localhosy）,也可以是远程服务器。数据库服务器上可以托管多个数据库，因此database表示要使用的数据库名。如果数据集需要进行认证，username和password表示数据库用户
密令


SQLite数据库不需要使用服务器，因此不同指定hostname、username和password。URL中的database是硬盘上文件名。

程序使用的数据库URL必须保存到Flask配置对象的SQLALCHEMY_DATABASE_URI键中。配置对象中海油一个很有用的选项，
即SQLALCHEMY_COMMIT_ON_TEARDOWN键，将其设为True时，每次请求结束后都会自动提交数据库中的变动。其他配置选项
的作用请参阅Flask-SQLAlchemy的文档，例如如何初始化及配置一个简单的SQLite数据库。

from flask.ext.sqlalchemy import SQLAlchemy

basedir = os.path.abspath(os.path.dirname(__file__))
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = \
    'sqlite:///' + os.path.join(basedir, 'data.sqlite')
app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True
db = SQLAlchemy(app)

db对象是SQLAlchemy类的实例，表示程序使用的数据库，同时还获得了Flask-SQLAlchemy提供的所有功能。


定义模型：
模型这个术语表示程序使用的持久化实体。在ORM中，模型一般是一个Python类，类中的属性对应数据库表中的列。
Flask-SQLAlchemy创建的数据库实例为模型提供了一个基类以及一系列辅助类和辅助函数，可用于定义模型的结构
如图：
Role <==> User
定义Role和User模型：
class Role(db.Model):
    __tablename__ = 'roles'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), unique=True)
    
    def __repr__(self):
        return '<Role %r>' % self.name

class User(db.Model):
    __tablename__ == 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, index=True)

    def __repr__(self):
        return '<User %r>' % self.name

类变量__tablename__定义在数据库中使用的表名，如果没有定义__tablename__.Flask-SQLAlchemy会使用一个默认名字，
但默认的表名没有遵循使用复数形式进行命名的约定，所以最好由我们自己来指定表名，其余的类变量都是该模型的属性，
被定义为db.Column类的实例。

db.Column类构造函数的第一个参数是数据库列和模型属性的类型，列出一些可用的列类型以及在模型中使用的Python类型.
最常用的SQLAlchemy列类型：
类型名：              Python；类型                  说明：
Integer               int                           普通整数，一般是32位
SmallInteger          int                           取值范围小的整数，一般是16位
BigInteger            int或long                     不限制精度的整数
Float                 float                         浮点数
Numeric               decimal.Decimal               定点数
String                str                           变长字符串
Text                  str                           变长字符串，对较长或不限长度的字符串做了优化
Unicode               unicode                       变长Unicode字符串
UnicodeText           unicode                       变长Unicode字符串，对较长或不限长度的字符串做了优化
Boolean               bool                          布尔值
Date                  datetime.date                 日期
Time                  datetime.time                 时间
DateTime              datetime.datetime             日期和时间
Interval              datetime.timedelta            时间间隔
Enum                  str                           一组字符串
PickleType            任何Python对象                自动使用Pickle序列化
LargeBinary           str                           二进制文件































