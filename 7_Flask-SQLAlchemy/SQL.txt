SQL数据库：
关系型数据库把数据存储在表中，表模拟程序中不同的实体，如：订单管理程序的数据库中可能有表
customers、products、和orders

表的列数是固定的，行数是可变的。列定义表所表示的实体的数据属性，例如：customers表中可能有name、address、phone等列。表中的行定义各列对于的真是数据

表中有特殊的列，称为主键、其值为表中各行的唯一标识符。表中还可以有称为外键的列，引用同一个表或不同表中某行的主
键。行之间的这种联系称为关系，这是关系型数据库模型的基础。

简单数据库的关系图：这个数据库中有两个表，分别存储用户和用户角色，连接两个表的线代两个表之间的关系。

roles                          users
id        ============         id
name                  |        username
                      |        password
                      |======> role_id

关系型数据库示例：
在这个数据库关系图中，roles表存储所有可用的角色，每个角色都使用一个唯一的id值(即表的主键)进行标识。
users表包含用户列表，每个用户也有唯一的id值。除了id主键之外，roles表中还有name列，users表中还有username列和password列。users表中的role_id列是外键，引用角色的id，通过这种方式为每个用户指定角色

从这个例子可以看出，关系型数据库存储数据很高效，而且避免重复，将这个数据库中的用户角色重命名也很简单，因为角色
名只出现一个地方。一旦在roles表中修改完角色名，所有通过role_id引用这个角色的用户都能立即看到更新。

但从另一方面来看，把数据分别存放在多个列表中还是很复杂的。生成一个包含角色的用户列表会遇到一个小问题，因为在此
之前要分别从两个标准读取用户和用户角色，再将其连结起来。关系型数据库引擎为联结操作提供了必要支持。


NoSQL数据库：
所有不遵循上街所述的关系模型的数据库统称为NoSQL数据库，NoSQL数据库一般使用集合代替表，使用文档代替记录，NoSQL数据库采用的设计方式使联结变得困难，所以大多数数据库根本不支持这种操作，若要列出个用户其角色，就需要在程序中执行
联结操作，即先读取每个用户的role_id,再在roles表中搜索对应的记录，
NoSQL数据库更适合设计成如图结构，这是执行烦回访操作得到的结果，它减少了表的数量，却增加了数据重复量。
users
id
username
password
role

这种结构的数据库要把角色名存储在每个用户中，如此一来，将角色重命名的操作就变得很耗时，可能需要更新大量文档。
使用NoSQL数据库当然也有好处，数据重复可以提升查询速度，列出用户及其角色的操作很简单，因为无需联结。



Python数据库框架：
大多数的数据库引擎都有对于的Python包，包括开源包和商业包，Flask并不限制你使用何种类型的数据库包，因此可以根据自己的喜好选择使用MySQL、Postgres、SQLite、Redis、MongoDB或者CouchDB

如果这些都无法满足需求，还有一些数据库抽象层代码包供选择，例如SQLAlchemy和MongoEngine、你可以使用这些使用抽象包直接处理高等级的Python对象，而不用处理如表、文档或查询语言此类的数据库实体。


选择数据库框架时，你要考虑很多因素。

易用性：
如果直接比较数据库引擎和数据库抽象层，仙人后者取胜。抽象层，也称为对象关系映射(Object-Relational Mapper, ORM)或对象文档映射(Object-Document Mapper, ODM)，在用户不知觉的情况下把高层的面向对象操作转换成低层的数据库指令。


性能：
ORM和ODM把对象业务转换成数据库业务会有一定损耗。大多数情况下，这种性能的降低微不足道，但也不一定都是如此，一般
情况下，ORM和ODM对生产率的提升远远超过了这一丁点儿的性能降低，所以性能降低这个理由不足以说服用户完全放弃
ORM和ODM。真正的关键点在于如何选择一个能直接操作低层数据库的抽象层，以防特定的操作需要直接使用数据库原生指令
优化。

可移植性：
选择数据库时，必须考虑其是否能在你的开发平台和生成平台中使用，例如，如果你打算利用云平台托管程序，就要知道这个
云服务提供了哪些数据库可供选择。
可移植性还针对ORM和ODM，尽管有些框架只为一种数据库引擎提供抽象层，但其他框架可能做了更高层的抽象，它们支持不同的数据库引擎，而且都使用相同的面向对象接口,SQLAlchemy ORM就是一个很好的例子，它支持很多关系型数据库引擎，包括
流行的MySQL,Postgres和SQLite.

Flask集成度：
选择框架时，你不一定非得选择已经集成了Flask的框架，但选择这些框架可以节省，你编写集成代码的时间。使用集成Flask
的框架可以简化配置和操作，所以专门为Flask开发的拓展是你的首选。

基于以上因素，选择使用的数据库框架时Flask-SQLAlchemy(http://pythonhosted.org/Flask-SQLAlchemy)这个Flask拓展包
装了SQLAlchemy(http://www.sqlalchemy.org)框架
以及中文学习地址:(http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0014021031294178f993c85204e4d1b81ab032070641ce5000)























